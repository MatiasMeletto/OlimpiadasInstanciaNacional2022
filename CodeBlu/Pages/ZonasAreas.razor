@inject NavigationManager navigationManager
@inject IDbContextFactory<CodeBluingDbContext> DbFactory
@page "/zonasAreas"

@*Este codigo lo que hace es que si la matriz del objeto Zona se tiene algo, osea hay zonas en la base de datos, las muestra 1 por 1 y les da un boton con su propio link*@
<br>
@if(zonas is not null)
{
    <table>
        <thead>
            <tr>
                <th>ID</th> <th>Nombre</th> <th>Cant. Personal</th> <th>Cant. Pacientes</th><th>Cant llamados</th>
            </tr>
        </thead>
        <tbody>

            @foreach(Zona z in zonas)
            {
                <tr>              
                    <td>@z.ZonaId</td>
                    <td>@z.Nombre</td>                
                    <td>@z.Personal.Count()</td>
                    <td>@z.Pacientes.Count()</td>
                    <td>@z.Llamados.Count()</td>
                    <td><button @onclick="@(() => { navigationManager.NavigateTo($"/zonasAreas/inspZona/{z.ZonaId}"); })" class="btn-dark"><i class="fas fa-eye"></i></button></td>
                    <td><button @onclick="@(() => { navigationManager.NavigateTo($"/zonasAreas/editarZona/{z.ZonaId}"); })" class="btn-dark"><i class="fas fa-pen"></i></button></td>
                </tr>
            }
        </tbody>
    </table>
}
else 
{
    <label>Cargando...</label>
}

@*Esta parte esta dedicada a la creacion de nuevas zonas*@
<br>
@if(!creando)
{
    <br>
    <br>
    @*Si se da clic en el boton, creando (variable de comprobacion que muestra o no esta parte) se vuelve verdadero y manda a re renderizar la pag*@
    <button @onclick="@(() => { creando = true; StateHasChanged(); })"> Crear una nueva area / zona</button>
}


@if(creando)
{
    <input type="text" @bind="zona.Nombre" />
    
    @*La parte de crear es simple, solo un input que diga el nombre y luego 2 botnoes, uno de crear y otro de cancelar, ambos mandan a re renderizar la pag*@
    <button @onclick="@(() => { creando = false; SubirZona(); })"> Crear </button>
    <button @onclick="@(() => { creando = false; StateHasChanged(); })"> Cancelar </button>
}

@code {
    //creo un viewModel para poder manipular datos libremente en vista
    public class ZonaViewModel
    {
        [StringLength(255)]
        public string? Nombre { get; set; }
    }

    private ZonaViewModel zona { get; set; } = new();
    private bool creando;
    //declaro un matriz que va a servir para mostrar todas las zonas en vista
    private Zona[]? zonas;

    protected override async Task OnInitializedAsync()
    {
        //inicializo el creando en false y que consulte a la base de datos y traiga todas las zonas y las guarde en Zona[]? zonas

        creando = false;

        using var db = DbFactory.CreateDbContext();

        zonas = await db.Zonas.ToArrayAsync();
    }

    //Este metodo lo que hace es leer el viewmodel y subir a la base de datos lo que haya, luego resetea la lista, deja el creando en falso, resetea el nombre del viewModel y re renderiza la pag
    private async void SubirZona()
    {
        using var db = DbFactory.CreateDbContext();

        if (zona.Nombre is not null)
        {
            zona.Nombre.Trim();

            Zona zonaNueva = new Zona()
            {
                Nombre = zona.Nombre
            };

            await db.Zonas.AddAsync(zonaNueva);
            await db.SaveChangesAsync();
        }

        zonas = await db.Zonas.ToArrayAsync();
        creando = false;
        zona.Nombre = null;
        StateHasChanged();
    }
}