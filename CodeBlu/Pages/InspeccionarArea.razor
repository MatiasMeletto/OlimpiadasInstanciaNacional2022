@inject NavigationManager navigationManager
@inject IDbContextFactory<CodeBluingDbContext> DbFactory
@page "/zonasAreas/inspZona/{ZonaId:int?}"

<h1 class="text-center">Zona Nº @ZonaId</h1>

<br>
<div class="ArreglarTexto">
<h4 class="text-decoration-underline text-center">@zona.Nombre</h4>
</div>
<br>
<div class="container-fluid">
	<div class="row container">

		@*estos if lo que hacen es: verificar que no sean null para evitar fallos y poner una lista de todos los pacientes/medicos/llamados (cada uno en su correspondiente tabla)*@
		@if(pacientes is not null)
		{
		<div class="col-4">	
				<div style="margin: 0 auto;" class="EstiloTabla container">
				<table id="tabla1">
					<thead>
						<tr>
							<th>Pacientes</th>
						</tr>
					</thead>
					<tbody>

						@foreach (Paciente p in pacientes)
						{
							<tr>
								<td>@p.Nombre  @p.Apellido</td>			
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		}

		@if(personal is not null)
		{
		<div class="col-4">	
			<div class="EstiloTabla container">
					<table style="margin: 0 auto;" id="tabla1">
					<thead>
						<tr>
							<th>Personal</th>
						</tr>
					</thead>
					<tbody>

						@foreach (PersonalMedico p in personal)
						{
							<tr>
								<td>@p.Nombre  @p.Apellido</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>	
		}


		@if(llamados is not null)
		{
		<div class="col-4">	
			<div class="EstiloTabla container">
					<table style="margin: 0 auto;" id="tabla1">
					<thead>
						<tr>
							<th>Llamado</th>
						</tr>
					</thead>
					<tbody>

						@foreach (Llamado l in llamados)
						{
							<tr>
								<td>@l.TipoLlamado @l.Atendido @l.Paciente.Apellido</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
		}
	</div>
</div>
<br >
<br >
<br >

@*usa el navigationManager para volver a la pestaña anterior*@
<button class="EstiloBtn" @onclick="@(() => { navigationManager.NavigateTo("/zonasAreas"); })"> Volver </button>

@code {
	//guarda la zona que llego de la otra pagina
	[Parameter]
	public int? ZonaId { get; set; }
	
	//crea un viewModel para zona
	public class ZonaViewModel
	{
		public string Nombre { get; set; }
	}

	//declara los arreglos que se van a mostrar en vista y los ViewModel
	public ZonaViewModel zona { get; set; } = new();
	public Paciente[]? pacientes { get; set; }
	public Llamado[]? llamados { get; set; }
	public PersonalMedico[]? personal { get; set; }

	protected override async Task OnInitializedAsync()
	{
		using var db = DbFactory.CreateDbContext();

		//rellena los arreglos
		pacientes = await db.Pacientes.Where(p => p.ZonaId == ZonaId).ToArrayAsync();
		llamados = await db.Llamados.Where(p => p.ZonaId == ZonaId).ToArrayAsync();
		personal = await db.Personal.Where(p => p.ZonaId == ZonaId).ToArrayAsync();

		//rellena el viewModel con el parametro que le llega de la otra pag
		Zona? z = await db.Zonas.Where(z => z.ZonaId == ZonaId).SingleOrDefaultAsync();

		if (z is not null)
		{
			zona.Nombre = z.Nombre;
		}
	}
}