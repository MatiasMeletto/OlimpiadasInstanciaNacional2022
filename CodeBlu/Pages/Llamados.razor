@inject IDbContextFactory<CodeBluingDbContext> DbFactory
@inject NavigationManager navigationManager
@page "/llamados"

<h1 class="text-center">Llamados lista</h1>
<div class="Centrar container">
@if (llamados is not null)
{
	    <div class="EstiloTabla container"></div>
    <table style="margin: 0 auto;" id="tabla1">
        <thead>
            <tr>
				<th>Tipo de llamado</th>
				<th>Origen del llamado</th>
				<th>Atendido</th>
				<th>Fecha y hora de origen</th>
				<th>Fecha y hora de atendido</th>
            </tr>
        </thead>
        <tbody>
			@foreach (Llamado l in llamados)
			{
				<tr>
					<td>@l.TipoLlamado.ToString()</td>
					<td>@l.OrigenLlamado.ToString()</td>
					<td>@l.Atendido</td>
					<td>@l.FechaHora</td>
					<td>@l.HoraAtendido</td>
				</tr>
			}
        </tbody>
    </table>
}
else
{
	<label>Cargando...</label>
}
<br>
<br>
	<h5 class="text-decoration-underline">Crear llamado/reporte</h5>
<label> Tipo de llamado</label>
<br>
<select id="selector" @bind="llamado.TipoLlamado">
	<option value="@TipoLlamado.Emergencia">Emergencia</option>
	<option value="@TipoLlamado.Normal">Normal</option>
</select>
<br>
<label> Origen de llamado</label>
<br>
<select id="selector" @bind="llamado.OrigenLlamado">
	<option value="@TipoOrigenLlamado.Banio">Baño</option>
	<option value="@TipoOrigenLlamado.Cama">Cama</option>
</select>
<br>
@if(pacientes is not null)
{
	<label> Paciente</label>
	<br>
	<select id="selector" @bind="llamado.PacienteId">
		@foreach(Paciente p in pacientes)
		{
			<option value="@p.PacienteId">@p.Nombre  @p.Apellido</option>
		}
	</select>
}
<br>
@if (zonas is not null)
{
    <div class="row mb-3">
        <div class="col-md-12">
            <label for="selector1"> Zona: </label>
            <select id="selector1" @bind="llamado.ZonaId">
                <option selected value="0">-Seleccione una zona-</option>
                @foreach (Zona z in zonas)
                {
                    <option value="@z.ZonaId">@z.Nombre</option>
                }
            </select>

        </div>
    </div>

}
@if (personal is not null)
{
	<div class="row mb-3">
		<div class="col-md-12">
			<label for="selector1"> Personal a cargo: </label>
			<select id="selector1" @bind="llamado.PersonalMedicoId">
				<option selected value="0">-Seleccione un enfermero/a-</option>
				@foreach (PersonalMedico p in personal)
				{
					<option value="@p.PersonalMedicoId">@p.Nombre  @p.Apellido</option>
				}
			</select>

		</div>
	</div>
}
<br>
<label>Atendido </label>
<input type="checkbox" @bind="llamado.Atendido" />
<br>
<br>
<button @onclick="SubirLlamado" >Cargar</button>
</div>
@code {
	public class LlamadoViewModel
	{
		public TipoLlamado TipoLlamado { get; set; }
		public TipoOrigenLlamado OrigenLlamado { get; set; }
		public bool Atendido { get; set; }
		public DateTime FechaHora { get; set; }
		public DateTime HoraAtendido { get; set; }
		public int PacienteId { get; set; }
		public int ZonaId { get; set; }
		public int PersonalMedicoId { get; set; }
	}

	public LlamadoViewModel llamado { get; set; } = new();
	public PersonalMedico[]? personal;
	public Zona[]? zonas;
	public Llamado[]? llamados;
	public Paciente[]? pacientes;

	protected override async Task OnInitializedAsync()
	{
		using var db = DbFactory.CreateDbContext();

		llamado.FechaHora = DateTime.Now;
		llamado.HoraAtendido = DateTime.Now;

		zonas = await db.Zonas.ToArrayAsync();
		llamados = await db.Llamados.ToArrayAsync();
		pacientes = await db.Pacientes.ToArrayAsync();
		personal = await db.Personal.ToArrayAsync();
	}

	public async void SubirLlamado()
	{
		using var db = DbFactory.CreateDbContext();

		if(llamado.ZonaId != 0 && llamado.PersonalMedicoId != 0 && llamado.PacienteId != 0)
		{
			Llamado l = new()
			{
				TipoLlamado = llamado.TipoLlamado,
				OrigenLlamado = llamado.OrigenLlamado,
				Atendido = llamado.Atendido,
				FechaHora = llamado.FechaHora,
				HoraAtendido = llamado.HoraAtendido,
				PacienteId = llamado.PacienteId,
				ZonaId = llamado.ZonaId,
				PersonalMedicoId = llamado.PersonalMedicoId
			};

			await db.Llamados.AddAsync(l);
			await db.SaveChangesAsync();
			llamados = await db.Llamados.ToArrayAsync();
			StateHasChanged();
		}
	}
}