@inject IDbContextFactory<CodeBluingDbContext> DbFactory
@inject NavigationManager navigationManager
@page "/llamados"

<h1>Llamados lista</h1>

@if (llamados is not null)
{
	<table>
		<thead>
			<tr>
				<th>ID</th>
				<th>Tipo de llamado</th>
				<th>Origen del llamado</th>
				<th>Atendido</th>
				<th>Fecha y hora de origen</th>
				<th>Fecha y hora de atendido</th>
			</tr>
		</thead>
		<tbody>

			@foreach (Llamado l in llamados)
			{
				<tr>
					<td>@l.TipoLlamado.ToString()</td>
					<td>@l.OrigenLlamado.ToString()</td>
					<td>@l.Atendido</td>
					<td>@l.FechaHora</td>
					<td>@l.HoraAtendido</td>
					@*<td><button @onclick="@(() => { navigationManager.NavigateTo($"/zonasAreas/inspZona/{z.ZonaId}"); })" class="btn-dark"><i class="fas fa-eye"></i></button></td>*@
				</tr>
			}
		</tbody>
	</table>
}
else
{
	<label>Cargando...</label>
}

<h5>Crear llamado / reporte</h5>

<select @bind="llamado.TipoLlamado">
	<option value="@TipoLlamado.Emergencia">Emergencia</option>
	<option value="@TipoLlamado.Normal">Normal</option>
</select>
<br />
<select @bind="llamado.OrigenLlamado">
	<option value="@TipoOrigenLlamado.Banio">Baño</option>
	<option value="@TipoOrigenLlamado.Cama">Cama</option>
</select>
<br />
<label>atendido: </label>
<input type="checkbox" @bind="llamado.Atendido" />
@if(pacientes is not null)
{
	<label> PACIENTES:</label>
	<br />
	<select @bind="llamado.PacienteId">
		@foreach(Paciente p in pacientes)
		{
			<option value="@p.PacienteId">@p.Nombre  @p.Apellido</option>
		}
	</select>
}
<br />
<br />
<button @onclick="SubirLlamado" >Cargar</button>

@code {
	public class LlamadoViewModel
	{
		public TipoLlamado TipoLlamado { get; set; }
		public TipoOrigenLlamado OrigenLlamado { get; set; }
		public bool Atendido { get; set; }
		public DateTime FechaHora { get; set; }
		public DateTime HoraAtendido { get; set; }
		public int PacienteId { get; set; }
	}

	public LlamadoViewModel llamado { get; set; } = new();
	public Llamado[]? llamados;
	public Paciente[]? pacientes;

	protected override async Task OnInitializedAsync()
	{
		using var db = DbFactory.CreateDbContext();

		llamado.FechaHora = DateTime.Now;
		llamado.HoraAtendido = DateTime.Now;

		llamados = await db.Llamados.ToArrayAsync();
		pacientes = await db.Pacientes.ToArrayAsync();
	}

	public async void SubirLlamado()
	{
		using var db = DbFactory.CreateDbContext();

		Paciente? p = await db.Pacientes.Where(p => p.PacienteId == llamado.PacienteId).SingleOrDefaultAsync();

		if(p is not null)
		{
			Llamado l = new()
			{
				TipoLlamado = llamado.TipoLlamado,
				OrigenLlamado = llamado.OrigenLlamado,
				Atendido = llamado.Atendido,
				FechaHora = llamado.FechaHora,
				HoraAtendido = llamado.HoraAtendido,
				Paciente = p	
			};

			await db.Llamados.AddAsync(l);
			await db.SaveChangesAsync();
			StateHasChanged();
		}
	}
}